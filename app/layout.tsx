import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import GuestHeader from "@/components/GuestHeader";
import AcademicsHeader from "@/components/AcademicsHeader";
import MemberHeader from "@/components/MemberHeader";
import { cookies } from "next/headers";
import axios, { AxiosError } from "axios";
import { COOKIE_NAME, TABLES } from "@/constants";
import { createSupabaseUserClient } from "@/types/supabaseClient";
const { NEXT_PUBLIC_BASE_URL } = process.env;
const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

// retreiving verification status
const getVerificationStatus = async () => {
  const cookieStore = await cookies();
  const token = await cookieStore.get(COOKIE_NAME)?.value;

  if(!token) {
    return 0;
  }
  else {
    try {
      const supabaseUser = createSupabaseUserClient(token);
      const { data, error } = await supabaseUser.from(TABLES.USERS).select('verification').single();
      if(error) { throw Error(error.message); }
      const verification = data?.verification;
      return verification;
    }
    catch(error : any) {
      console.log(error.message);
      return 0;
    }
  }
}

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  // grab verification to determine what header we use
  const verification = await getVerificationStatus();

  const headerSelection = async () => {
    // academics director
    if(verification === 2) {
      return (<AcademicsHeader />);
    }
    else if(verification === 1) {
      return (<MemberHeader />);
    }
    else {
      return (<GuestHeader />);
    }
  }
  return (
    <html lang="en" suppressHydrationWarning>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <header>
          {headerSelection()}
        </header>

        {children}

        <footer>placeholder for footer </footer>
      </body>
    </html>
  );
}
